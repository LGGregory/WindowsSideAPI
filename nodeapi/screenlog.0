]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# s[Kc[K]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# ls
app.js  config.json  [0m[01;34mlib[0m  mainstyle.css  [01;34mnode_modules[0m  npm-debug.log  package.json  package-lock.json  [01;34mpublic[0m  screenlog.0  Try.js  util.js  [01;31mWindowsSide0.8.zip[0m
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# npm run server
[?25l[[90m..................[0m] - : [32minfo[0m [35musing[0m node@v10.16.0[K[K[?25h
> windowsside@1.0.0 server /home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi
> nodemon app.js

[33m[nodemon] 1.19.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching: *.*[39m
[32m[nodemon] starting `node app.js`[39m
Server starting on port 9210
Liam Gregory logged in
(node:14847) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'hash' of undefined
    at Object.exports.checkUser (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:46:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node:14847) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:14847) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
(node:14847) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'hash' of undefined
    at Object.exports.checkUser (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:46:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node:14847) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 2)
(node:14847) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'hash' of undefined
    at Object.exports.checkUser (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:46:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node:14847) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 3)
c^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano a[K/[Klib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 198 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5H[32mconst[39m[m hash = await bcrypt.hash(password, saltRounds);[10;5H[32mconst[39m[m cP = squel.insert()[11;9H.into([0;1m[33m"accounts"[39m[m)[12;9H.set([0;1m[33m"full_name"[39m[m, fullname)[13;9H.set([0;1m[33m"email_address"[39m[m, user_email)[14;9H.toParam();[15;5H[32mconst[39m[m pP = squel.insert()[16;9H.into([0;1m[33m"pdata"[39m[m)[17;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[18;13H.from([0;1m[33m"accounts"[39m[m)[19;13H.field([0;1m[33m"account_id"[39m[m)[20;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[21;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[23;9H.toParam();[24;5H[32mconst[39m[m connection = await pool.getConnection();[25;5Hawait connection.beginTransaction();[26;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[28;9Hawait connection.execute(pP.text, pP.values);[29;9Hawait connection.commit();[30;5H}[1B[0;1m[33mcatch[39m[m (err) {[32;9Hawait connection.rollback();[33;9H[35mreturn[39m[m false;[34;5H}[1Bconnection.release();[36;5H[35mreturn[39m[m true;[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[40;5H[32mvar[39m[m lP = squel.select()[41;9H.from([0;1m[33m"`accounts`"[39m[m)[42;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[43;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[44;9H.toParam();[45;5H[32mconst[39m[m connection = await pool.getConnection();[47;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[48;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[49;5Hconnection.release();[50;5H[0;1m[33mif[39m[m (match){[42m [51;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[52;9H[35mreturn[39m[m {[53;13H[0;1m[33m"authenticated"[39m[m: true,[54;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[55;13H[0;1m[33m"email"[39m[m: rows[0].email_address[56;9H};}[57;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[1B}[3B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1BMMMM7[10;60r8M[1;63r[1;228H[0;7mModified[10B[mMconsole.log(hash);[51B[K[10;19H[7C[1K	console.log(hash);[10;9H[8P console.log(hash);   console.log(hash);     console.log(hash);       console.log(hash);[18D[1B[50B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 199 lines ][m[K[11;5H[50B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# [Bnano lib/dbscripts.js[7Ppm run serverano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 199 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5H[32mconst[39m[m hash = await bcrypt.hash(password, saltRounds);[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[41;5H[32mvar[39m[m lP = squel.select()[42;9H.from([0;1m[33m"`accounts`"[39m[m)[43;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[44;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[45;9H.toParam();[46;5H[32mconst[39m[m connection = await pool.getConnection();[48;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[49;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[50;5Hconnection.release();[51;5H[0;1m[33mif[39m[m (match){[42m [52;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[53;9H[35mreturn[39m[m {[54;13H[0;1m[33m"authenticated"[39m[m: true,[55;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[56;13H[0;1m[33m"email"[39m[m: rows[0].email_address[57;9H};}[58;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[1B}[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[43B[J[63;237H[63;1H[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# clear
[H[J]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# cat lib/dbscripts.js
//TODO rewrite to use stored account id instead of email

const squel = require('squel');
const bcrypt = require('bcrypt');

exports.createUser = async function (pool, user_email, password, fullname) {
    const hash = await bcrypt.hash(password, saltRounds);
    console.log(hash);
    const cP = squel.insert()
        .into("accounts")
        .set("full_name", fullname)
        .set("email_address", user_email)
        .toParam();
    const pP = squel.insert()
        .into("pdata")
        .set("account_id", squel.select()
            .from("accounts")
            .field("account_id")
            .where("email_address = ?", user_email)
        )
        .set("hash", hash)
        .toParam();
    const connection = await pool.getConnection();
    await connection.beginTransaction();
    try {
        await connection.execute(cP.text, cP.values);
        await connection.execute(pP.text, pP.values);
        await connection.commit();
    }
    catch (err) {
        await connection.rollback();
        return false;
    }
    connection.release();
    return true;
}

exports.checkUser = async function (pool, user_email, password) {
    var lP = squel.select()
        .from("`accounts`")
        .left_join("`pdata`", null, "`accounts`.`account_id`=`pdata`.`account_id`")
        .where("`email_address` = ?", user_email)
        .toParam();
    const connection = await pool.getConnection();

    const [rows, fields] = await connection.execute(lP.text, lP.values);
    const match = await bcrypt.compare(password, rows[0].hash)
    connection.release();
    if (match){ 
        console.log(rows[0].full_name + " logged in");
        return {
            "authenticated": true,
            "name": rows[0].full_name,
            "email": rows[0].email_address
        };}
    else 
        return { "authenticated": false };
}

exports.getComputerInfo = async function (pool, user_email) {
    var cI = squel.select()
        .field("`c`.`computer_id`")
        .field("`computer_name`", "name")
        .field("`computer_styled_name`", "styled_name")
        .from("`computers`", "c")
        .where("`c`.`account_id` = ?", squel.select()
            .field("`account_id`")
            .from("`accounts`")
            .where("email_address = ?", user_email))
        .toParam();
    const connection = await pool.getConnection();
    var rows,fields;
    try{
        [rows,fields]= await connection.execute(cI.text, cI.values);
    } catch(err){
        return false;
    }
    return rows;
}


exports.createComputer = async function (pool, options) {
    console.log(options);
    const cI = squel.insert().into("`computers`")
    .set("`account_id`", 
        squel.select()
        .from("`accounts`")
        .field("`account_id`")
        .where("`email_address` = ?", options.email))
    .set("`computer_name`", options.computer_name)
    .set("`computer_styled_name`", options.styled_name)
    .toParam();
    //const sql = "INSERT INTO `computers` (`account_id`, `computer_name`, `computer_styled_name`) VALUES ((SELECT `account_id` FROM `accounts` WHERE `email_address` = ?), ?, ?);";
    
    try {
        await pool.execute(cI.text,cI.values);
    } catch (err) {
        console.log(err);
        return false;
    }
    return true;
}

/* 
    Options - 
    {
        email
        computer
        usages - [
            {
                usage
                value
            }
        ]
    }
*/

//this is wrong
exports.updateUsages = async function (pool, options) {
    if (!options.email) {
        throw new error("email missing");
    } else if (!options.computer_name) {
        throw new error("computer missing");
    } else if (!options.usages || options.usages.length == 0) {
        throw new error("no changes");
    }
    
    const req = squel.select().field("`a`.`account_id`").field("`c`.`computer_id`").from("`computers`", "c")
        .join("`accounts`", "a", "`a`.`account_id` = `c`.`account_id`")
        .where("`a`.`email_address` = ?", options.email)
        .where("`c`.`computer_name` = ?", options.computer_name)
        .toParam();
    const rep = "REPLACE INTO `computeruses` (`account_id`, `computer_id`, `usage_id`, `value`) values (?, ?, (SELECT `usage_id` FROM `usages` WHERE `usage_name` = ?), ?);"
    const conn = await pool.getConnection();
    await conn.beginTransaction();
    const [fields] = await conn.execute(req.text, req.values);
    if (fields.length == 0) {
        
        await conn.rollback();
        return false;
    }
    try {
        for (let i = 0; i < options.usages.length; i++) {
            await conn.execute(
                rep,
                [
                    fields[0].account_id,
                    fields[0].computer_id,
                    options.usages[i].usage_name,
                    options.usages[i].value
                ]
            );
        }
        await conn.commit();
    } catch (err) {
        await conn.rollback();
        return false;
    }
    conn.release();
    return true;
}

exports.getUsages = async function (pool, email, computer_name) {
    const sql = "select `u`.`usage_id`, `u`.`usage_name`, ifnull(`cu`.`value`,0) as value from `usages` `u` left join (select `usage_id`, `value` from `computeruses` where `computer_id` = ( select `computer_id` from `computers` where (`computer_name` = ?) and (`account_id` = (select `account_id` from `accounts` where (`email_address` = ?))))) `cu` on `u`.`usage_id` = `cu`.`usage_id` order by `u`.`usage_id` asc;"
    try {
        [data, options] = await pool.execute(sql, [computer_name, email]);
    } catch (err) {
        return false;
    }
    data.forEach((usage)=>{
        usage.value = (usage.value === 1);
    })
    return data;
}

exports.getComputerNameFromIP = async function(pool, ip){
    const sql = "select `computer_name` from `computers` where `ip_address` = ?";
    try {
        [data] = await pool.execute(sql, [ip]);
        
    } catch(err){
        return false;
    } 
    return data;
}

exports.setComputerIP = async function(pool, email, computer_name, ip){
    const sql = "update `computers` set `ip_address` = ? where `computer_name` = ? and `account_id` = (select `account_id` from `accounts` where `email_address` = ?)";
    try{
        await pool.execute(sql, [
            ip,
            computer_name,
            email
        ]);
    }catch (err){
        return false;
    }
    return true;
}
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 199 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5H[32mconst[39m[m hash = await bcrypt.hash(password, saltRounds);[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[41;5H[32mvar[39m[m lP = squel.select()[42;9H.from([0;1m[33m"`accounts`"[39m[m)[43;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[44;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[45;9H.toParam();[46;5H[32mconst[39m[m connection = await pool.getConnection();[48;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[49;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[50;5Hconnection.release();[51;5H[0;1m[33mif[39m[m (match){[42m [52;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[53;9H[35mreturn[39m[m {[54;13H[0;1m[33m"authenticated"[39m[m: true,[55;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[56;13H[0;1m[33m"email"[39m[m: rows[0].email_address[57;9H};}[58;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[1B}[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[57B[J[63;237H[63;1H[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# clear
[H[J]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# node app.js
Server starting on port 9210
(node:14874) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'hash' of undefined
    at Object.exports.checkUser (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:47:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node:14874) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:14874) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
^X  ^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# node app.js[6Pclearnano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 199 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5H[32mconst[39m[m hash = await bcrypt.hash(password, saltRounds);[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[41;5H[32mvar[39m[m lP = squel.select()[42;9H.from([0;1m[33m"`accounts`"[39m[m)[43;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[44;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[45;9H.toParam();[46;5H[32mconst[39m[m connection = await pool.getConnection();[48;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[49;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[50;5Hconnection.release();[51;5H[0;1m[33mif[39m[m (match){[42m [52;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[53;9H[35mreturn[39m[m {[54;13H[0;1m[33m"authenticated"[39m[m: true,[55;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[56;13H[0;1m[33m"email"[39m[m: rows[0].email_address[57;9H};}[58;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[1B}[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1BMM[9;58H[1;228H[0;7mModified[9;57H[m [Z.[Z [Z.the   [Z [Z;[Z [Z[52B[K[9;55H[Z[Z[Z[Z[Z[1P[1P[1P[1P[1P[1P[1P[6Dconst[1P	[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P    [9;38H ,[42m [49m[m functio[7D[32mfunction[39m[m(err,hash){[10;23H[11;30H[12;26H[13;36H[1B	)[15;20H[16;30H[17;23H[18;42H[19;30H[1B	[21;52H[22;10H[23;27H[24;20H[25;51H[26;41H[27;10H[28;54H[1B[30;35H[31;6H[32;18H[33;37H[34;22H[35;6H[36;26H[37;17H[36;26HM[20D[36;26H[37;17H7[38;60r8[1BM[1;63r[38;1H}MM[25B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 200 lines ][m[K[25A [25B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# lear[K[K[K[Kclear
[H[J]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# node app.js
/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:23
    const connection = await pool.getConnection();
                       ^^^^^

SyntaxError: await is only valid in async function
    at Module._compile (internal/modules/cjs/loader.js:721:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Module.require (internal/modules/cjs/loader.js:690:17)
    at require (internal/modules/cjs/helpers.js:25:18)
    at Object.<anonymous> (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/app.js:4:12)
    at Module._compile (internal/modules/cjs/loader.js:776:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# node app.js[6Pclearnano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 200 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, saltRounds, [32mfunction[39m[m(err,hash){[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B}[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[42;5H[32mvar[39m[m lP = squel.select()[43;9H.from([0;1m[33m"`accounts`"[39m[m)[44;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[45;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[46;9H.toParam();[47;5H[32mconst[39m[m connection = await pool.getConnection();[49;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[50;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[51;5Hconnection.release();[52;5H[0;1m[33mif[39m[m (match){[42m [53;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[54;9H[35mreturn[39m[m {[55;13H[0;1m[33m"authenticated"[39m[m: true,[56;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[57;13H[0;1m[33m"email"[39m[m: rows[0].email_address[58;9H};}[59;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1BM    bcr	pt.hash	p[52B[K[9;19Hsswor	, saltR	unds, [1;228H[0;7mModified[9;37H[m , [32mfunction[39m[m(err,hash){[9;38H[1P,  [32mfunction[39m[m(err,hash){[9;39Ha [32mfunction[39m[m(err,hash){[9;40Hs [32mfunction[39m[m(err,hash){[9;41Hy [32mfunction[39m[m(err,hash){[9;42Hn [32mfunction[39m[m(err,hash){[9;43Hc [32mfunction[39m[m(err,hash){[9;44H[52B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 200 lines ][m[K[9;44H[52B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js[10Pode app.js
/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:36
}
^

SyntaxError: missing ) after argument list
    at Module._compile (internal/modules/cjs/loader.js:721:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Module.require (internal/modules/cjs/loader.js:690:17)
    at require (internal/modules/cjs/helpers.js:25:18)
    at Object.<anonymous> (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/app.js:4:12)
    at Module._compile (internal/modules/cjs/loader.js:776:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# node app.jsano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 200 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, saltRounds, async [32mfunction[39m[m(err,hash){[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B}[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[42;5H[32mvar[39m[m lP = squel.select()[43;9H.from([0;1m[33m"`accounts`"[39m[m)[44;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[45;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[46;9H.toParam();[47;5H[32mconst[39m[m connection = await pool.getConnection();[49;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[50;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[51;5Hconnection.release();[52;5H[0;1m[33mif[39m[m (match){[42m [53;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[54;9H[35mreturn[39m[m {[55;13H[0;1m[33m"authenticated"[39m[m: true,[56;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[57;13H[0;1m[33m"email"[39m[m: rows[0].email_address[58;9H};}[59;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1Bexport[1Br	pt.hash	pas[52B[K[9;21Hwor	, saltR	unds[1;228H[0;7mModified[9;36H[m[1P[1P[1P[Z[1P[1P[1P[1P[1P[1P[1P1, async [32mfunction[39m[m(err,hash){[9;28H2, async [32mfunction[39m[m(err,hash){[9;29H[10;23HM[6CM[1B[1P[1P1, async [32mfunction[39m[m(err,hash){[9;28H2, async [32mfunction[39m[m(err,hash){[9;29H[10;23H[11;29H[12;26H[13;29H[1B[15;20H[16;29H[17;23H[18;29H[1B[1B[1B[22;10H[21;29HMMMM[6DM[6C[15;20H[14;29H[47B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 200 lines ][m[K[14;29H[47B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js[10Pode app.jsano lib/dbscripts.js[10Pode app.js[6Pclearnano lib/dbscripts.js[10Pode app.js[6Pclearnano lib/dbscripts.js[1Pcat[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Clear[Knano lib/dbscripts.js[7Ppm run serverls[Ksudo ln -sf /usr/local/n/versions/node/10/16.0/bin/node /usr/bin/node[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cls[Kcd /usr/local/n/versions/nodenode -v[Ksudo ln -sf /usr/local/n/versions/node/10/16.0/bin/node /usr/bin/node[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cnode -v[Ksudo ln -sf /usr/local/n/versions/node/11.8.0/bin/node /usr/bin/node[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cn stable[Kln -sf /usr/local/n/versions/node/11.8.0/bin/node /usr/bin/node[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cnode -v[Ksudo ln -sf /usr/local/n/versions/node/10/16.0/bin/node /usr/bin/node[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cnode -v[Kcd /usr/local/n/versions/nodels[Ksudo ln -sf /usr/local/n/versions/node/10/16.0/bin/node /usr/bin/node[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cls[Knpm run serverano lib/dbscripts.js[7Ppm run server
[?25l[[90m..................[0m] - : [32minfo[0m [35musing[0m node@v10.16.0[K[K[?25h
> windowsside@1.0.0 server /home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi
> nodemon app.js

[33m[nodemon] 1.19.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching: *.*[39m
[32m[nodemon] starting `node app.js`[39m
/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:36
}
^

SyntaxError: missing ) after argument list
    at Module._compile (internal/modules/cjs/loader.js:721:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Module.require (internal/modules/cjs/loader.js:690:17)
    at require (internal/modules/cjs/helpers.js:25:18)
    at Object.<anonymous> (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/app.js:4:12)
    at Module._compile (internal/modules/cjs/loader.js:776:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
^X^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# npm run serverano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 200 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B}[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[42;5H[32mvar[39m[m lP = squel.select()[43;9H.from([0;1m[33m"`accounts`"[39m[m)[44;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[45;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[46;9H.toParam();[47;5H[32mconst[39m[m connection = await pool.getConnection();[49;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[50;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[51;5Hconnection.release();[52;5H[0;1m[33mif[39m[m (match){[42m [53;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[54;9H[35mreturn[39m[m {[55;13H[0;1m[33m"authenticated"[39m[m: true,[56;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[57;13H[0;1m[33m"email"[39m[m: rows[0].email_address[58;9H};}[59;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[33B[K[32A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1BM}M[1;228H[0;7mModified[38;2H[m)'[?25l[61;104H[0;7m[ XOFF ignored, mumble mumble ][38;4H[m[34h[?25h[23B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 200 lines ][m[K[38;4H[23B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js[7Ppm run server
[?25l[[90m..................[0m] - : [32minfo[0m [35musing[0m node@v10.16.0[K[K[?25h
> windowsside@1.0.0 server /home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi
> nodemon app.js

[33m[nodemon] 1.19.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching: *.*[39m
[32m[nodemon] starting `node app.js`[39m
/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:36
})'
  ^

SyntaxError: Invalid or unexpected token
    at Module._compile (internal/modules/cjs/loader.js:721:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Module.require (internal/modules/cjs/loader.js:690:17)
    at require (internal/modules/cjs/helpers.js:25:18)
    at Object.<anonymous> (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/app.js:4:12)
    at Module._compile (internal/modules/cjs/loader.js:776:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
^[[A^[[A^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# npm run serverano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 200 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B})'[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[42;5H[32mvar[39m[m lP = squel.select()[43;9H.from([0;1m[33m"`accounts`"[39m[m)[44;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[45;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[46;9H.toParam();[47;5H[32mconst[39m[m connection = await pool.getConnection();[49;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[50;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[51;5Hconnection.release();[52;5H[0;1m[33mif[39m[m (match){[42m [53;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[54;9H[35mreturn[39m[m {[55;13H[0;1m[33m"authenticated"[39m[m: true,[56;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[57;13H[0;1m[33m"email"[39m[m: rows[0].email_address[58;9H};}[59;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[33B[K[32A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1BMMM})'[1;228H[0;7mModified[38;3H[m ;[23B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 200 lines ][m[K[38;4H[23B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js[7Ppm run server
[?25l[[90m..................[0m] - : [32minfo[0m [35musing[0m node@v10.16.0[K[K[?25h
> windowsside@1.0.0 server /home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi
> nodemon app.js

[33m[nodemon] 1.19.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching: *.*[39m
[32m[nodemon] starting `node app.js`[39m
Server starting on port 9210
(node:14988) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'hash' of undefined
    at Object.exports.checkUser (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:48:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node:14988) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:14988) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
nano app        a clear     no  ^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# npm run serverano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 200 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B});[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[42;5H[32mvar[39m[m lP = squel.select()[43;9H.from([0;1m[33m"`accounts`"[39m[m)[44;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[45;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[46;9H.toParam();[47;5H[32mconst[39m[m connection = await pool.getConnection();[49;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[50;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[51;5Hconnection.release();[52;5H[0;1m[33mif[39m[m (match){[42m [53;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[54;9H[35mreturn[39m[m {[55;13H[0;1m[33m"authenticated"[39m[m: true,[56;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[57;13H[0;1m[33m"email"[39m[m: rows[0].email_address[58;9H};}[59;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1BM[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1BMMMMM[45B[K[46AMMMMM[1B[51B[J[63;237H[63;1H[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# y[Knano lib/dbscripts.js[7Ppm run serverano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 200 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[1B});[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[42;5H[32mvar[39m[m lP = squel.select()[43;9H.from([0;1m[33m"`accounts`"[39m[m)[44;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[45;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[46;9H.toParam();[47;5H[32mconst[39m[m connection = await pool.getConnection();[49;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[50;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[51;5Hconnection.release();[52;5H[0;1m[33mif[39m[m (match){[42m [53;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[54;9H[35mreturn[39m[m {[55;13H[0;1m[33m"authenticated"[39m[m: true,[56;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[57;13H[0;1m[33m"email"[39m[m: rows[0].email_address[58;9H};}[59;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1BMMMMM[1;228H[0;7mModified[9;12H[m[1K bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;9Hc    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;10Ho    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;11Hn    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;12Hs    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;13H	[32mconst[39m[m    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;14H     bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;15Ha    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;16H[1Ph    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[52B[K[9;16Ha    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;17Hs    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;18Hh    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;19H     bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;20H=    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;21H     bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;22Ha    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;23Hw    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;24Ha    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;25Hi    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;26Ht    bcrypt.hash(password, 12, async [32mfunction[39m[m(err,hash){[9;27H  [1P [1P[9;80H      [Z [Z    [9;61Hfunctio   [Z [Z   [42m [49m[m    [Z [Z [42m [49m[m   );[10;23H[9;55H[10;23H[11;30H[12;26H[13;36H[1B	)[15;20H[16;30H[17;23H[18;42H[19;30H[1B	[21;52H[22;10H[23;27H[24;20H[25;51H[26;41H[27;10H[28;54H[1B[30;35H[31;6H[32;18H[33;37H[34;22H[35;6H[36;26H[37;17H[38;4H  [KMMMMMMMMMMMMMMMMMMMMMMMMMMM MM[9;9H[C	[8P [32mconst[39m[m hash = await  bcrypt.hash(password, 12);   [32mconst[39m[m hash = await  bcrypt.hash(password, 12);     [32mconst[39m[m hash = await  bcrypt.hash(password, 12);       [32mconst[39m[m hash = await  bcrypt.hash(password, 12);[46D[52B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 200 lines ][m[K[9;5H[52B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# ca[K[Knano node.j[K[K[K[K[K[Kapp.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 148 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                   File: app.js                                                                                                                                              [3;1H[0;1m[33m"use strict"[39m[m;[1B[32mconst[39m[m wss = require([0;1m[33m'./config.json'[39m[m);[1B[32mconst[39m[m util = require([0;1m[33m'./util.js'[39m[m);[1B[32mconst[39m[m db = require([0;1m[33m'./lib/dbscripts.js'[39m[m);[2B[0;1m[34m//passwords[1B[0m[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[1B[32mconst[39m[m saltRounds = 12;[2B[0;1m[34m//server[1B[0m[32mconst[39m[m express = require([0;1m[33m'express'[39m[m);[1B[32mconst[39m[m app = express();[1B[32mvar[39m[m server = require([0;1m[33m'http'[39m[m).Server(app);[1B[32mconst[39m[m expressPort = 9210;[2B[0;1m[34m//cargo cult body-parser[1B[0m[32mconst[39m[m bodyParser = require([0;1m[33m'body-parser'[39m[m);[1Bapp.use(bodyParser.urlencoded({ extended: false }))[1Bapp.use(bodyParser.json());[2B[0;1m[34m//sql[1B[0m[32mconst[39m[m mysql = require([0;1m[33m'mysql2/promise'[39m[m);[2B[0;1m[34m//tcp stuff[1B[0m[32mconst[39m[m io = require([0;1m[33m'socket.io'[39m[m)(server);[3B[32mconst[39m[m pool = mysql.createPool([31;5H{[1B	host: wss.env.[0;1m[31mHOSTNAME[39m[m,[33;9Huser: wss.env.[0;1m[31mUSERNAME[39m[m,[34;9Hpassword: wss.env.[0;1m[31mPASSWORD[39m[m,[35;9Hport: wss.env.[0;1m[31mPORT[39m[m,[36;9Hdatabase: wss.env.[0;1m[31mDATABASE[39m[m,[37;9HwaitForConnections: true,[38;9HconnectionLimit: 10,[39;9HqueueLimit: 0[40;5H}[1B);[2B[32mvar[39m[m sockets = {};[3Bapp.get([0;1m[33m'/download/newest'[39m[m, (req,res)=>{[47;3Hres.sendFile([0;1m[33m'WindowsSide0.8.zip'[39m[m);[1B});[2B[0;1m[34m// Express API[1B[39m[mapp.post([0;1m[33m'/api/user/create'[39m[m, (req, res) => {[52;5H[32mvar[39m[m data = req.body;[53;5H[0;1m[33mtry[39m[m {[1B	db.createUser(pool, data.email, data.password, data.fullname);[55;5H}[1B[0;1m[33mcatch[39m[m (err) {[57;9Hres.status(400);[58;9H[0;1m[33mthrow[39m[m err;[59;5H}[1Bres.status(201);[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[33B[K[32A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[2;61r[2;1H[30M[1;63r[2;1H[K[29B});[2Bapp.post([0;1m[33m'/api/user/login'[39m[m, async (req, res) => {[34;5H[32mvar[39m[m body = req.body;[36;5H[32mconst[39m[m ret = await db.checkUser(pool, body.email.toLowerCase(), body.password);[38;5H[0;1m[33mif[39m[m (ret.authenticated) {[39;9Hres.status(201).json(ret);[40;5H} [0;1m[33melse[39m[m {[1B	res.status(418).json(ret);[42;5H}[1B});[2Bapp.post([0;1m[33m'/api/computers/create'[39m[m, async (req, res)=>{[46;5H[32mvar[39m[m ret = await db.createComputer(pool, req.body);[47;5H[0;1m[33mif[39m[m(!ret) res.status(400);[48;5Hres.status(201).json(ret);[1B})[3Bapp.post([0;1m[33m'/api/computers/get'[39m[m, async (req, res) => {[53;5H[32mvar[39m[m ret = await db.getComputerInfo(pool, req.body.email);[54;5H[0;1m[33mif[39m[m(!ret) res.status(400);[55;5Hres.status(201).json(ret);[2B});[3Bapp.post([0;1m[33m'/api/uses/get'[39m[m, async (req, res)=> {[29A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1BMMMMMMMMMMMMMMMMMMM[1B[1B[1B[1B[1B[32B[J[63;237H[63;1H[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# y[Knode pp[K[Kapp.js
Server starting on port 9210
(node:15037) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'hash' of undefined
    at Object.exports.checkUser (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:48:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node:15037) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:15037) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
^X  ^[[A^[[A^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# node app.jsano[C[C[C[C[C[C[C
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 148 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                   File: app.js                                                                                                                                              [3;1H[0;1m[33m"use strict"[39m[m;[1B[32mconst[39m[m wss = require([0;1m[33m'./config.json'[39m[m);[1B[32mconst[39m[m util = require([0;1m[33m'./util.js'[39m[m);[1B[32mconst[39m[m db = require([0;1m[33m'./lib/dbscripts.js'[39m[m);[2B[0;1m[34m//passwords[1B[0m[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[1B[32mconst[39m[m saltRounds = 12;[2B[0;1m[34m//server[1B[0m[32mconst[39m[m express = require([0;1m[33m'express'[39m[m);[1B[32mconst[39m[m app = express();[1B[32mvar[39m[m server = require([0;1m[33m'http'[39m[m).Server(app);[1B[32mconst[39m[m expressPort = 9210;[2B[0;1m[34m//cargo cult body-parser[1B[0m[32mconst[39m[m bodyParser = require([0;1m[33m'body-parser'[39m[m);[1Bapp.use(bodyParser.urlencoded({ extended: false }))[1Bapp.use(bodyParser.json());[2B[0;1m[34m//sql[1B[0m[32mconst[39m[m mysql = require([0;1m[33m'mysql2/promise'[39m[m);[2B[0;1m[34m//tcp stuff[1B[0m[32mconst[39m[m io = require([0;1m[33m'socket.io'[39m[m)(server);[3B[32mconst[39m[m pool = mysql.createPool([31;5H{[1B	host: wss.env.[0;1m[31mHOSTNAME[39m[m,[33;9Huser: wss.env.[0;1m[31mUSERNAME[39m[m,[34;9Hpassword: wss.env.[0;1m[31mPASSWORD[39m[m,[35;9Hport: wss.env.[0;1m[31mPORT[39m[m,[36;9Hdatabase: wss.env.[0;1m[31mDATABASE[39m[m,[37;9HwaitForConnections: true,[38;9HconnectionLimit: 10,[39;9HqueueLimit: 0[40;5H}[1B);[2B[32mvar[39m[m sockets = {};[3Bapp.get([0;1m[33m'/download/newest'[39m[m, (req,res)=>{[47;3Hres.sendFile([0;1m[33m'WindowsSide0.8.zip'[39m[m);[1B});[2B[0;1m[34m// Express API[1B[39m[mapp.post([0;1m[33m'/api/user/create'[39m[m, (req, res) => {[52;5H[32mvar[39m[m data = req.body;[53;5H[0;1m[33mtry[39m[m {[1B	db.createUser(pool, data.email, data.password, data.fullname);[55;5H}[1B[0;1m[33mcatch[39m[m (err) {[57;9Hres.status(400);[58;9H[0;1m[33mthrow[39m[m err;[59;5H}[1Bres.status(201);[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[2B[1B[1B[1B[1B[1B[1B[33B[K[32A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[2;61r[2;1H[30M[1;63r[2;1H[K[29B});[2Bapp.post([0;1m[33m'/api/user/login'[39m[m, async (req, res) => {[34;5H[32mvar[39m[m body = req.body;[36;5H[32mconst[39m[m ret = await db.checkUser(pool, body.email.toLowerCase(), body.password);[38;5H[0;1m[33mif[39m[m (ret.authenticated) {[39;9Hres.status(201).json(ret);[40;5H} [0;1m[33melse[39m[m {[1B	res.status(418).json(ret);[42;5H}[1B});[2Bapp.post([0;1m[33m'/api/computers/create'[39m[m, async (req, res)=>{[46;5H[32mvar[39m[m ret = await db.createComputer(pool, req.body);[47;5H[0;1m[33mif[39m[m(!ret) res.status(400);[48;5Hres.status(201).json(ret);[1B})[3Bapp.post([0;1m[33m'/api/computers/get'[39m[m, async (req, res) => {[53;5H[32mvar[39m[m ret = await db.getComputerInfo(pool, req.body.email);[54;5H[0;1m[33mif[39m[m(!ret) res.status(400);[55;5Hres.status(201).json(ret);[2B});[3Bapp.post([0;1m[33m'/api/uses/get'[39m[m, async (req, res)=> {[29A[1B[1B[1B[1B[1B[1B[1B[1B[1B[1B[1BMM[22B[J[63;237H[63;1H[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano app.jsode[C[C[C[C[C[C[Cano[C[C[C[C[C[C[Clib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 200 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5H[32mconst[39m[m hash = await  bcrypt.hash(password, 12);[10;5Hconsole.log(hash);[11;5H[32mconst[39m[m cP = squel.insert()[12;9H.into([0;1m[33m"accounts"[39m[m)[13;9H.set([0;1m[33m"full_name"[39m[m, fullname)[14;9H.set([0;1m[33m"email_address"[39m[m, user_email)[15;9H.toParam();[16;5H[32mconst[39m[m pP = squel.insert()[17;9H.into([0;1m[33m"pdata"[39m[m)[18;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[19;13H.from([0;1m[33m"accounts"[39m[m)[20;13H.field([0;1m[33m"account_id"[39m[m)[21;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[22;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[24;9H.toParam();[25;5H[32mconst[39m[m connection = await pool.getConnection();[26;5Hawait connection.beginTransaction();[27;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[29;9Hawait connection.execute(pP.text, pP.values);[30;9Hawait connection.commit();[31;5H}[1B[0;1m[33mcatch[39m[m (err) {[33;9Hawait connection.rollback();[34;9H[35mreturn[39m[m false;[35;5H}[1Bconnection.release();[37;5H[35mreturn[39m[m true;[2B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[42;5H[32mvar[39m[m lP = squel.select()[43;9H.from([0;1m[33m"`accounts`"[39m[m)[44;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[45;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[46;9H.toParam();[47;5H[32mconst[39m[m connection = await pool.getConnection();[49;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[50;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[51;5Hconnection.release();[52;5H[0;1m[33mif[39m[m (match){[42m [53;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[54;9H[35mreturn[39m[m {[55;13H[0;1m[33m"authenticated"[39m[m: true,[56;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[57;13H[0;1m[33m"email"[39m[m: rows[0].email_address[58;9H};}[59;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1B[1BM[1BMM    [C[C[C	[C has[52B[K[9;15H 	 await 	b[Z[1;228H[0;7mModified[9;23H[m[1P 	crypt.h	sh(pass	ord, 12	[10;23H     [Z [Z       	 	   [42m    [49m[m    [K[10;61r[61;1H
[1;63r[60;1H}[9;50H[10;30H[11;26H[12;36H[1B	)[14;20H[15;30H[16;23H[17;42H[18;30H[1B	[20;50H[21;10H[22;27H[23;20H[24;50H[25;41H[24;50H[23;20H[22;27H[21;10H[20;50H[19;33HM[17;42H[16;23H[15;30H[14;20H[13;42HM[6D[11;26HMrt()[9;50H[Z	;[Z [Z ,[42m [49m[m[Z async[42m [49m[m functio[Z[32mfunction[39m[m(err,hash){[10;30H[11;26H[12;36H[1B	)[14;20H[15;30H[16;23H[17;42H[18;30H[1B	[20;52H[21;10H[22;27H[23;20H[24;51H[25;41H[26;10H[27;54H[1B[29;35H[30;6H[31;18H[32;37H[33;22H[34;6H[35;26H[36;17H[1B});MMMMMMMMMMMMMMMMMMMMMMMMMMMM [C[C[C	[C hash 	 await [1P[1P[1P[1P[1P[1P[Z[1P[1P[1P[1P[1P[1P[1P[6Dconst[1P	[1P[1P[1P[1P[1Pbcr	pt.hash	passwor	, 12, a	ync [C[C[C	[C[C[C[C(er	,hash){      [Z [Z    [9;37Hfunctio   [Z [Z   [42m [49m[m    [Z [Z [42m [49m[m   ).then({ {[52B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 199 lines ][m[K[9;37H[52B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 199 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, 12).then({[10;5H[32mconst[39m[m cP = squel.insert()[11;9H.into([0;1m[33m"accounts"[39m[m)[12;9H.set([0;1m[33m"full_name"[39m[m, fullname)[13;9H.set([0;1m[33m"email_address"[39m[m, user_email)[14;9H.toParam();[15;5H[32mconst[39m[m pP = squel.insert()[16;9H.into([0;1m[33m"pdata"[39m[m)[17;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[18;13H.from([0;1m[33m"accounts"[39m[m)[19;13H.field([0;1m[33m"account_id"[39m[m)[20;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[21;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[23;9H.toParam();[24;5H[32mconst[39m[m connection = await pool.getConnection();[25;5Hawait connection.beginTransaction();[26;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[28;9Hawait connection.execute(pP.text, pP.values);[29;9Hawait connection.commit();[30;5H}[1B[0;1m[33mcatch[39m[m (err) {[32;9Hawait connection.rollback();[33;9H[35mreturn[39m[m false;[34;5H}[1Bconnection.release();[36;5H[35mreturn[39m[m true;[1B});[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[41;5H[32mvar[39m[m lP = squel.select()[42;9H.from([0;1m[33m"`accounts`"[39m[m)[43;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[44;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[45;9H.toParam();[46;5H[32mconst[39m[m connection = await pool.getConnection();[48;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[49;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[50;5Hconnection.release();[51;5H[0;1m[33mif[39m[m (match){[42m [52;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[53;9H[35mreturn[39m[m {[54;13H[0;1m[33m"authenticated"[39m[m: true,[55;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[56;13H[0;1m[33m"email"[39m[m: rows[0].email_address[57;9H};}[58;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[1B}[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1B[1B[1BM    bcr	pt.has	p[52B[K[9;19Hsswor	, 12).t	en({[1B [9;37H[1;228H[0;7mModified[9;35H[m(({a{{[Ke{r{rr{,{[Zh{a{s{h{){{{ ={>{[52B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 199 lines ][m[K[9;48H[52B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js[10Papp.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 148 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                   File: app.js                                                                                                                                              [3;1H[0;1m[33m"use strict"[39m[m;[1B[32mconst[39m[m wss = require([0;1m[33m'./config.json'[39m[m);[1B[32mconst[39m[m util = require([0;1m[33m'./util.js'[39m[m);[1B[32mconst[39m[m db = require([0;1m[33m'./lib/dbscripts.js'[39m[m);[2B[0;1m[34m//passwords[1B[0m[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[1B[32mconst[39m[m saltRounds = 12;[2B[0;1m[34m//server[1B[0m[32mconst[39m[m express = require([0;1m[33m'express'[39m[m);[1B[32mconst[39m[m app = express();[1B[32mvar[39m[m server = require([0;1m[33m'http'[39m[m).Server(app);[1B[32mconst[39m[m expressPort = 9210;[2B[0;1m[34m//cargo cult body-parser[1B[0m[32mconst[39m[m bodyParser = require([0;1m[33m'body-parser'[39m[m);[1Bapp.use(bodyParser.urlencoded({ extended: false }))[1Bapp.use(bodyParser.json());[2B[0;1m[34m//sql[1B[0m[32mconst[39m[m mysql = require([0;1m[33m'mysql2/promise'[39m[m);[2B[0;1m[34m//tcp stuff[1B[0m[32mconst[39m[m io = require([0;1m[33m'socket.io'[39m[m)(server);[3B[32mconst[39m[m pool = mysql.createPool([31;5H{[1B	host: wss.env.[0;1m[31mHOSTNAME[39m[m,[33;9Huser: wss.env.[0;1m[31mUSERNAME[39m[m,[34;9Hpassword: wss.env.[0;1m[31mPASSWORD[39m[m,[35;9Hport: wss.env.[0;1m[31mPORT[39m[m,[36;9Hdatabase: wss.env.[0;1m[31mDATABASE[39m[m,[37;9HwaitForConnections: true,[38;9HconnectionLimit: 10,[39;9HqueueLimit: 0[40;5H}[1B);[2B[32mvar[39m[m sockets = {};[3Bapp.get([0;1m[33m'/download/newest'[39m[m, (req,res)=>{[47;3Hres.sendFile([0;1m[33m'WindowsSide0.8.zip'[39m[m);[1B});[2B[0;1m[34m// Express API[1B[39m[mapp.post([0;1m[33m'/api/user/create'[39m[m, (req, res) => {[52;5H[32mvar[39m[m data = req.body;[53;5H[0;1m[33mtry[39m[m {[1B	db.createUser(pool, data.email, data.password, data.fullname);[55;5H}[1B[0;1m[33mcatch[39m[m (err) {[57;9Hres.status(400);[58;9H[0;1m[33mthrow[39m[m err;[59;5H}[1Bres.status(201);[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[58B[J[63;237H[63;1H[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano app.jslib/dbscripts.js[10Papp.jsode[C[C[C[C[C[C[C
/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:22
    const connection = await pool.getConnection();
                       ^^^^^

SyntaxError: await is only valid in async function
    at Module._compile (internal/modules/cjs/loader.js:721:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Module.require (internal/modules/cjs/loader.js:690:17)
    at require (internal/modules/cjs/helpers.js:25:18)
    at Object.<anonymous> (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/app.js:4:12)
    at Module._compile (internal/modules/cjs/loader.js:776:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# node app.jsano[C[C[C[C[C[C[Clib/dbscripts.js[10Papp.jslib/dbscripts.js
(B)0[?1049h[1;63r[m[4l[?1h=[?1h=[?1h=[39;49m[?25l[39;49m[m[H[J[61;111H[0;7m[ Reading File ][58A[m[61;110H[0;7m[ Read 199 lines ][58A[m[34h[?25h[H[39;49m[0;7m  GNU nano 2.5.3                                                                File: lib/dbscripts.js                                                                                                                                       [3;1H[0;1m[34m//TODO rewrite to use stored account id instead of email[2B[0m[32mconst[39m[m squel = require([0;1m[33m'squel'[39m[m);[1B[32mconst[39m[m bcrypt = require([0;1m[33m'bcrypt'[39m[m);[2Bexports.createUser = async [32mfunction[39m[m (pool, user_email, password, fullname) {[9;5Hbcrypt.hash(password, 12).then((err,hash)=>{[10;5H[32mconst[39m[m cP = squel.insert()[11;9H.into([0;1m[33m"accounts"[39m[m)[12;9H.set([0;1m[33m"full_name"[39m[m, fullname)[13;9H.set([0;1m[33m"email_address"[39m[m, user_email)[14;9H.toParam();[15;5H[32mconst[39m[m pP = squel.insert()[16;9H.into([0;1m[33m"pdata"[39m[m)[17;9H.set([0;1m[33m"account_id"[39m[m, squel.select()[18;13H.from([0;1m[33m"accounts"[39m[m)[19;13H.field([0;1m[33m"account_id"[39m[m)[20;13H.where([0;1m[33m"email_address = ?"[39m[m, user_email)[21;9H)[1B	.set([0;1m[33m"hash"[39m[m, hash)[23;9H.toParam();[24;5H[32mconst[39m[m connection = await pool.getConnection();[25;5Hawait connection.beginTransaction();[26;5H[0;1m[33mtry[39m[m {[1B	await connection.execute(cP.text, cP.values);[28;9Hawait connection.execute(pP.text, pP.values);[29;9Hawait connection.commit();[30;5H}[1B[0;1m[33mcatch[39m[m (err) {[32;9Hawait connection.rollback();[33;9H[35mreturn[39m[m false;[34;5H}[1Bconnection.release();[36;5H[35mreturn[39m[m true;[1B});[1B}[2Bexports.checkUser = async [32mfunction[39m[m (pool, user_email, password) {[41;5H[32mvar[39m[m lP = squel.select()[42;9H.from([0;1m[33m"`accounts`"[39m[m)[43;9H.left_join([0;1m[33m"`pdata`"[39m[m, null, [0;1m[33m"`accounts`.`account_id`=`pdata`.`account_id`"[39m[m)[44;9H.where([0;1m[33m"`email_address` = ?"[39m[m, user_email)[45;9H.toParam();[46;5H[32mconst[39m[m connection = await pool.getConnection();[48;5H[32mconst[39m[m [rows, fields] = await connection.execute(lP.text, lP.values);[49;5H[32mconst[39m[m match = await bcrypt.compare(password, rows[0].hash)[50;5Hconnection.release();[51;5H[0;1m[33mif[39m[m (match){[42m [52;9H[49m[mconsole.log(rows[0].full_name + [0;1m[33m" logged in"[39m[m);[53;9H[35mreturn[39m[m {[54;13H[0;1m[33m"authenticated"[39m[m: true,[55;13H[0;1m[33m"name"[39m[m: rows[0].full_name,[56;13H[0;1m[33m"email"[39m[m: rows[0].email_address[57;9H};}[58;5H[0;1m[33melse[0m[42m [1B	[49m[35mreturn[39m[m { [0;1m[33m"authenticated"[39m[m: false };[1B}[2B[0;7m^G[m Get Help	  [0;7m^O[m Write Out[6C[0;7m^W[m Where Is[7C[0;7m^K[m Cut Text	[0;7m^J[m Justify[62;91H[0;7m^C[m Cur Pos[62;109H[0;7m^Y[m Prev Page[6C[0;7mM-\[m First Line    [0;7mM-W[m WhereIs Next  [0;7m^^[m Mark Text[6C[0;7mM-}[m Indent Text   [0;7mM-U[m Undo[62;217H[0;7m^B[m Back[1B[0;7m^X[m Exit[63;19H[0;7m^R[m Read File[6C[0;7m^\[m Replace[63;55H[0;7m^U[m Uncut Text     [0;7m^T[m To Spell	  [0;7m^_[m Go To Line     [0;7m^V[m Next Page[6C[0;7mM-/[m Last Line     [0;7mM-][m To Bracket    [0;7mM-^[m Copy Text     [0;7mM-{[m Unindent Text [0;7mM-E[m Redo[63;217H[0;7m^F[m Forward[60A[1B[1B[1B[1B[1Be[1B   bcr	pt.hash	pas[52B[K[9;21Hwor	, 12).t	en([1;228H[0;7mModified[9;36H[m (err,hash)=>{[9;37Ha(err,hash)=>{[9;38Hs(err,hash)=>{[9;39Hy(err,hash)=>{[9;40Hn(err,hash)=>{[9;41Hc(err,hash)=>{[9;42H (err,hash)=>{[9;43H[52B[0;7mSave modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?                                                                                                                                                                                 [62;1H Y[m Yes[K[1B[0;7m N[m No  [63;17H[0;7m^C[m Cancel[K[61;62H[0;7mFile Name to Write: lib/dbscripts.js                        [1B^G[m Get Help[62;48H[0;7mM-D[m DOS Format[62;95H[0;7mM-A[m Append[62;142H[0;7mM-B[m Backup File[1B[0;7m^C[m Cancel	         [63;48H[0;7mM-M[m Mac Format[63;95H[0;7mM-P[m Prepend[63;142H[0;7m^T[m To Files[61;37H[?25l[61;109H[39;49m[m[1K [0;7m[ Wrote 199 lines ][m[K[9;43H[52B[J[1;228H[0;7m        [63;237H[m[63;1H[34h[?25h[?1049l[?1l>]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# nano lib/dbscripts.js[10Pode app.js
Server starting on port 9210
(node:15058) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'hash' of undefined
    at Object.exports.checkUser (/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi/lib/dbscripts.js:47:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
(node:15058) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:15058) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
^[[A^[[B^[[B            ^X  ^[[A^[[B^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# clear
[H[J]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# [Aclearnode app.jsano lib/dbscripts.js[10Pode app.js
Server starting on port 9210
Liam Gregory logged in
^C
]0;root@ip-172-31-45-133:/home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi\[root@ip-172-31-45-133 nodeapi]# npm run server
[?25l[[90m..................[0m] - : [32minfo[0m [35musing[0m node@v10.16.0[K[K[?25h
> windowsside@1.0.0 server /home/ec2-user/WindowsSide/WindowsSideAPI/nodeapi
> nodemon app.js

[33m[nodemon] 1.19.1[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching: *.*[39m
[32m[nodemon] starting `node app.js`[39m
Server starting on port 9210
Liam Gregory logged in
User disconnected.
Liam Gregory logged in
